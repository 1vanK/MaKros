Как MK XL фиксирует нажатия
---------------------------
Mortal Kombat XL работает на частоте 60 кадров в секунду. То есть время одного кадра (фрейма) = 1 секунда / 60 = 16.(6) миллисекунд.
Во фреймдате длительность анимаций показывается не в секундах, а просто в кадрах.
В начале каждого кадра MK считывает состояние клавиатуры.
Если в прошлом кадре какая-то клавиша была отжата, а в текущем кадре эта клавиша вжата, то игра фиксирует нажатие кнопки.
Если в прошлом кадре какая-то клавиша была вжата, а в текущем кадре она отжата, то игра фиксирует отпускание кнопки.
ОЧЕНЬ ВАЖНО это понимать и всегда помнить, потому что вы не можете вводить комбы слишком быстро.
Если в каком-то кадре какая-то кнопка была нажата и сразу же отпущена, то игра просто не зафиксирует это нажатие.



Например, ввод командного захвата Горо занимает минимум 4 кадра:
----------------------------------------------------------------
// Первый кадр (кадр, когда пользователь начал ввод комбы)
нажать ВНИЗ
задержка 17 мс // Ждем второй кадр, чтобы игра зафиксировала нажатие ВНИЗ
отпустить ВНИЗ
  
нажать НАЗАД
задержка 17 мс // Ждем третий кадр, чтобы игра зафиксировала нажатие НАЗАД
отпустить НАЗАД
  
нажать ВПЕРЕД
нажать БЫСТРЫЙ С НОГИ
задержка 17 мс // Ждем четвертый кадр. Игра зафиксирует одновременное нажатие двух клавиш F+3, и комба будет запущена на выполнение
отпустить ВПЕРЕД
отпустить БЫСТРЫЙ С НОГИ



В виде скрипта это выглядит так:
--------------------------------
static void GoroThrow()
{
    KeyDown(Keys.Down);           // нажать ВНИЗ
    Thread.Sleep(Keys.PressTime); // задержка
    KeyUp(Keys.Down);             // отпустить ВНИЗ
    
    KeyDown(Keys.Back);           // нажать НАЗАД
    Thread.Sleep(Keys.PressTime); // задержка
    KeyUp(Keys.Back);             // отпустить НАЗАД
    
    KeyDown(Keys.Forward);        // нажать ВПЕРЕД
    KeyDown(Keys.FrontKick);      // нажать БЫСТРЫЙ С НОГИ
    Thread.Sleep(Keys.PressTime); // задержка
    KeyUp(Keys.Forward);          // отпустить ВПЕРЕД
    KeyUp(Keys.FrontKick);        // отпустить БЫСТРЫЙ С НОГИ
}

Функция KeyPress() = НажатьКлавишу; Задержка; ОтпуститьКлавишу.
Таким образом скрипт можно значительно упростить:

static void GoroThrow()
{
    KeyPress(Keys.Down);
    KeyPress(Keys.Back);
    KeyPress(Keys.Forward, Keys.FrontKick);
}

При таком упрощении следует быть внимательным. Если нажатия одной и той же кнопки идут подряд,
то не забывайте ставить между ними задержку. Например бег будет выглядеть так:

static void Run()
{
    KeyPress(Keys.Forward);
    Thread.Sleep(Keys.PressTime);
    KeyPress(Keys.Forward, Keys.Block);
}



Автоматическое отпускание клавиш
--------------------------------
Допустим, вы выполняете комбу за Горо:
1) Усиленная кулачная прогулка (НАЗАД, ВПЕРЕД, МОЩНЫЙ С НОГИ, БЛОК)
2) Длинный с ноги (ВПЕРЕД + БЫСТРЫЙ С НОГИ)
3) Командный захват (нажимаете клавишу, на которую назначен скрипт)

В этом случае вы можете не успеть отпустить кнопку ВПЕРЕД перед запуском скрипта.
Возникает следующая ситуация: пользователь нажал кнопку ВПЕРЕД, затем скрипт нажал кнопку ВПЕРЕД,
состояние клавиши не изменилось -> игра не зафиксировала второе нажатие -> захват не произошел.

Поэтому перед выполнением любого скрипта очень рекомендуется вызвать функцию UnpressAllKeys().
Эта функция эмулирует отпускание двенадцати клавиш (направления, удары, интерактив, захват, блок и смена стойки).
Так как игра должна зафиксировать отпускание клавиш, то выполнение функции UnpressAllKeys() занимает 1 кадр.

static void GoroThrow()
{
    UnpressAllKeys();

    KeyPress(Keys.Down);
    KeyPress(Keys.Back);
    KeyPress(Keys.Forward, Keys.FrontKick);
}

При вызове UnpressAllKeys() вы можете указать, какие кнопки отжимать не нужно: UnpressAllKeys(клавиша1, клавиша2, ...).
Например, когда вы отменяете огненный шар персонажа "Скорпион Адское Пламя" в бег,
вам необходимо продолжать держать БЫСТРЫЙ С РУКИ до тех пор, пока бег не будет выполнен.
Поэтому бег для Скорпиона может выглядеть так:

static void Run()
{
    UnpressAllKeys(Keys.FrontPunch);

    KeyPress(Keys.Forward);
    Thread.Sleep(Keys.PressTime);
    KeyPress(Keys.Forward, Keys.Block);
}



Минимальная задержка в 17 мс не всегда оптимальна.
--------------------------------------------------
Допустим, у вас в игре стабильные 60 FPS, но ваш противник лагает. В этом случае лагать будете вы оба.
А значит игра просто не будет фиксировать слишком быстрые нажатия и комбы будут срываться (дропаться).
Кроме того скрипт не синхронизирован с игрой, и невозможно точно определить момент, когда игра считывает состояние клавиатуры.
Таким образом, лучше перестраховаться и использовать более длинную задержку.
Продолжительность задержки можно изменить в файле Keys.cs:
    public const int PressTime = 20;
Слишком длинную задержку тоже делать не стоит, так как это увеличит время ввода комбы.
Не путайте файл Keys.cs с файлом Key.cs. Key.cs содержит список всех кнопок клавиатуры, а Keys.cs - ваши настройки.
P.S. Похоже, что Mortal Kombat 11 опрашивает клавиатуру на частоте 30 ФПС. Если игра нестабильно фиксирует нажатия, то попробуйте
установить PressTime равным 40 мс (1000/30).




В этом же файле Keys.cs можно изменить клавиши, если ваши настройки отличаются от стандартных.
----------------------------------------------------------------------------------------------
Допустим, у вас БЫСТРЫЙ С НОГИ назначен на кнопку 9 на правой цифровой клавиатуре.
1а) Открываем файл Key.cs и ищем там название нужной кнопки. В этом файле все клавиши расположены в том же порядке, что и на клавиатуре.
1б) Другой способ:
    1) Запускаем пример скрипта MaKros.exe.
    2) Нажимаем F11, чтобы программа отображала нажимаемые кноки.
    3) Нажимаем нужную кнопку и тут же узнаем ее название.
       Из строки "Key: Num9; Scancode: 0x49; State: Up" видно, что название интересующей нас кнопки - Num9.
2) Открываем файл Keys.cs и меняем строку
     public const Key FrontKick = Key.K;
   на строку
     public const Key FrontKick = Key.Num9;
3) Сохраняем измененный файл и компилируем скипт.

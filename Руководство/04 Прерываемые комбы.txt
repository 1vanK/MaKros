На данном этапе вы уже знаете, как назначать на кнопки спецприемы. Однако для длинных комбинаций требуется другой подход.
Если вы запустите очень длинную комбу, а противник заблокирует первые удары, то очень важно прервать выполнение комбы
и вернуть себе контроль над персонажем.

Прерываемые комбы оформляются в виде такой функции:

static IEnumerator НазваниеФункции()
{
    return null; // Функция должна что-то вернуть
}

В такой функции можно использовать ПРЕРЫВАЕМУЮ задержку, которая выглядит так:

yield return ComboRunner.Wait(времяВМиллисекундах);

Реализуем функцию, которая выполняет "Землетрясение" персонажа "Горо Куатанский Воин" 3 раза:

static IEnumerator Tremor()
{
    UnpressAllKeys();

    // Землетрясение
    KeyPress(Keys.Down);
    Thread.Sleep(Keys.PressTime); // Здесь используется ОБЫЧНАЯ задержка. В этом месте комбу прервать нельзя
    KeyPress(Keys.Down, Keys.BackKick);

    yield return ComboRunner.Wait(17 * 88); // Здесь используется ПРЕРЫВАЕМЯ задержка. В этом месте комбу можно прервать

    // Еще раз землетрясение
    KeyPress(Keys.Down);
    Thread.Sleep(Keys.PressTime);
    KeyPress(Keys.Down, Keys.BackKick);

    yield return ComboRunner.Wait(17 * 88);

    // Третье землетрясение
    KeyPress(Keys.Down);
    Thread.Sleep(Keys.PressTime);
    KeyPress(Keys.Down, Keys.BackKick);

    // Если в функции есть хотя бы одна прерываемая задержка (yield return ...),
    // то возвращать null нельзя, так как возникнет ошибка компиляции.
    // Если же в функции нет ни одной прерываемой задержки, то в конце функции нужно вернуть null

    //return null;
}

Обратите внимание, что вы можете использовать и прерываемую, и обычную задержки.
Например, в вашей комбинации вы вжимаете кнопку с помощью функции KeyDown(). И если после этой функции прервать комбу,
то кнопка останется нажатой. В этом случае лучше использовать обычную задержку.

Усовершенствуем функцию и заставим Горо выполнять "Землетрясение" не 3 раза, а бесконечно:

static IEnumerator Tremor()
{
    UnpressAllKeys();

    while (true) // Бесконечный цикл
    {
        // Землетрясение
        KeyPress(Keys.Down);
        Thread.Sleep(Keys.PressTime); // Здесь используется ОБЫЧНАЯ задержка. В этом месте комбу прервать нельзя
        KeyPress(Keys.Down, Keys.BackKick);

        yield return ComboRunner.Wait(17 * 88); // Здесь используется ПРЕРЫВАЕМЯ задержка. В этом месте комбу можно прервать
    }
}

Итак, сама комба у нас есть. Теперь о том, как ее запускать и прерывать:

static bool OnKeyDown(Key key, bool repeat)
{
    // При нажатии на C запускаем бесконечное землетрясение
    if (key == Key.C)
    {
        if (!repeat)
            ComboRunner.Start(Tremor);
            
        return true;
    }
}

static bool OnKeyUp(Key key)
{
    // При отпускании C перываем текущуюу комбу
    if (key == Key.C)
        ComboRunner.Stop();
        
    return false;
}



Прерывание комбы мгновенное
---------------------------
ComboRunner работает параллельно основному циклу программы, т.е. нажатия и отпускания клавиш могут
обрабатываться даже когда ComboRunner выполняет какую-то комбу (это похоже на работу в фоновом потоке,
хотя тут нет настоящей многопоточности, и не нужно отвлекаться на синхронизацию потоков).

Прерываемая задержка не является точкой, в которой можно остановить комбу. Прерываемая задержка - это промежуток времени,
в течение которого можно прервать комбу. Если вы вызвали функцию ComboRunner.Stop(), то комба прервется мгновенно,
даже если скрипт в данный момент находится посередине прерываемой задержки.

Кроме того, во время выполнения какой-то комбы, вы можете запустить новую комбу, и выполнение старой комбы автоматически прервется.



Никогда не используйте обычную задержку, если вам нужна длинная задержка.
-------------------------------------------------------------------------
Thread.Sleep(Keys.PressTime) делает задержку в один кадр, чтобы игра зафиксировала нажатие или отпускание кнопки.
Больше ни для каких целей обычную задержку использовать не надо.
Если у вас в комбе есть задержка длиннее, чем Keys.PressTime, не задумываясь оформляйте комбу в виде
функции static IEnumerator НазваниеФункции() и используйте прерываемую задержку yield return ComboRunner.Wait(17 * числоКадров);.
Обычная задержка приостанавливает основной цикл программы, и обработка нажатий клавиш откладывается
на более поздний срок (пока не завершится ваша комба), в то время как прерываемая задержка возвращает
управление главному циклу программы на время задержки.

В папке MaKros довольно много файлов, но вам нужно обратить внимание только на два из них: Keys.cs (не путать с Key.cs) и Script.cs.



Файл Keys.cs
------------
Если вы поменяли клавиши в настройках игры, то вам нужно исправить этот файл.



Файл Script.cs
--------------
Тут собственно и находится скрипт.



Минимальный скрипт, который ничего не делает
--------------------------------------------
static partial class Script
{
    static void Start()
    {
        // Добавляйте сюда действия, которые хотите выполнить при запуске программы.
        // Можно, например, вывести какой-то текст
    }

    static bool OnKeyDown(Key key, bool repeat)
    {
        // Добавляйте сюда реакцию на нажатия клавиш
        return false;
    }
    
    static bool OnKeyUp(Key key)
    {
        // Добавляйте сюда реакцию на отпускание клавиш
        return false;
    }
}

Вы можете скопировать этот скрипт в Script.cs и программа успешно скомпилируется и запуститься.



Возвращаемые значения
---------------------
Функции OnKeyDown() и OnKeyUp() должны вернуть true или false. Если вы обработали нажатие какой-то клавиши и
хотите заблокировать ее дальнейшую обработку операционной системой, то возвращаете true.
В противном случае возвращаете false.

Рассмотрим на примерах:

// Функция блокирует ВСЕ нажатия.
// Клавиатура будет полностью заблокирована, пока вы не закроете программу мышкой
static bool OnKeyDown(Key key, bool repeat)
{
    return true;
}

// Функция эмулирует нажатие A и блокирует сигнал о нажатии клавиши Q.
// Пользователь пытается напечатать Q, а печатается A
static bool OnKeyDown(Key key, bool repeat)
{
    if (key == Key.Q)
    {
        KeyDown(Key.A);
        return true;
    }

    return false;
}

// Функция эмулирует нажатие A и НЕ блокирует сигнал о нажатии клавиши Q.
// Пользователь пытается напечатать Q, а печатается AQ
static bool OnKeyDown(Key key, bool repeat)
{
    if (key == Key.Q)
        KeyDown(Key.A);

    return false;
}



Флаг repeat
-----------
Каждый знает, что если в текстовом редакторе зажать какую-то клавишу, то буква будет печататься многократно до тех пор,
пока пользователь не отпустит клавишу.

Здесь та же ситуация: когда пользователь нажимает какую-то клавишу, функция OnKeyDown() может сработать несколько раз.
Поэтому необходимо проверять флаг repeat. Если repeat равен false, то это первое нажатие,
а если repeat == true, то это повторное нажатие и на него реагировать не нужно.

Таким образом типичная реакция на нажатие должна выглядеть так:

static bool OnKeyDown(Key key, bool repeat)
{
    if (key == Key.Q)
    {
        if (!repeat)
        {
            // Реакция
        }

        return true;
    }

    return false;
}



Корректное завершение программы
-------------------------------
Чтобы завершить программу, нужно присвоить переменной quit значение true.

static bool OnKeyDown(Key key, bool repeat)
{
    // При нажатии F12 выходим из программы
    if (key == Key.F12)
    {
        quit = true;
        return true;
    }
    
    return false;
}



Эмуляция нажатий клавиш
-----------------------
KeyDown(клавиша) - эмулирует нажатие клавиши.
KeyUp(клавиша) - эмулирует отпускание клавиши.

Можно эмулировать одновременное нажатие сразу нескольких клавиш:
  KeyDown(клавиша1, клавиша2, клавиша3, ...); // клавиша1 + клавиша2 + клавиша3
  KeyUp(клавиша1, клавиша2, клавиша3, ...);

Например, вы хотите при нажатии Q выполнить ВПЕРЕД + БЫСТРЫЙ С НОГИ. Скрипт может выглядеть так:

static bool OnKeyDown(Key key, bool repeat)
{
    if (key == Key.Q)
    {
        if (!repeat)
        {
            KeyDown(Key.D, Key.K);
            System.Threading.Thread.Sleep(Keys.PressTime); // Задержка необходима, об этом позже
            KeyUp(Key.D, Key.K);
        }

        return true;
    }

    return false;
}

Однако тут есть два огромных недостатка.

Во-первых, это будет работать, только если ваш персонаж слева от противника.
Если же ваш персонаж справа от противника, то кнопка ВПЕРЕД будет уже не Key.D, а Key.A.

Во-вторых, вы можете в любой момент поменять настройки игры, и за перемещения и удары будут отвечать уже другие кнопки.
Тогда вам придется переписывать весь скрипт целиком.

Эта проблема решена путем выноса всех важных кнопок в файл Keys.cs и использованием ударов и направлений вместо реальных клавиш клавиатуры.
Переменные Keys.Forward и Keys.Back устанавливаются динамически путем вызова функций Keys.LeftSide() и Keys.RightSide(),
когда персонаж слева или справа от врага.

// ВПЕРЕД + БЫСТРЫЙ С НОГИ
static void Forward3()
{
    KeyDown(Keys.Forward, Keys.FrontKick);
    System.Threading.Thread.Sleep(Keys.PressTime);
    KeyUp(Keys.Forward, Keys.FrontKick);
}

static bool OnKeyDown(Key key, bool repeat)
{
    if (key == Key.Q)
    {
        if (!repeat)
        {
            Keys.RightSide(); // Персонаж справа от врага
            Forward3();
        }

        return true;
    }
    
    if (key == Key.E)
    {
        if (!repeat)
        {
            Keys.LeftSide(); // Персонаж слева от врага
            Forward3();
        }

        return true;
    }

    return false;
}

Теперь, если мы слева от врага, то чтобы выполнить ВПЕРЕД + БЫСТРЫЙ С НОГИ мы нажимаем E, а если справа от врага, то нажимаем Q.

Можно пойти дальше и определить отдельные кнопки для указания положения персонажа относительно врага и отдельные кнопки для комбинаций.

static bool OnKeyDown(Key key, bool repeat)
{
    if (key == Key.Q)
    {
        if (!repeat)
            Keys.LeftSide(); // Персонаж слева от врага

        return true;
    }
    
    if (key == Key.E)
    {
        if (!repeat)
            Keys.RightSide(); // Персонаж справа от врага

        return true;
    }
    
    if (key == Key.F)
    {
        if (!repeat)
            Forward3();

        return true;
    }

    return false;
}

Таким образом, когда наш персонаж оказывается слева от врага, то мы жмем Q, а если справа от врага, то жмем E.
А дальше просто нажимаем F, чтобы нанести удар ВПЕРЕД + БЫСТРЫЙ С НОГИ.
В данном примере это выглядит как необоснованное усложнение, однако когда у вас в макросе будет десяток комбинаций,
то занимать по две кнопки на каждую комбинацию - это уже перебор. В общем, выбор за вами.

